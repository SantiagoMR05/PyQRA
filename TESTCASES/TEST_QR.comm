import pandas as pd

DEBUT(LANG='EN')

# LECTURA DE LA MALLA
MA = LIRE_MAILLAGE(UNITE=20)

# CREACION DE GRUPO QUE CONTIENE A TODOS LOS NODOS
MA = DEFI_GROUP(reuse=MA,
                 CREA_GROUP_NO = _F(NOM = 'N_ALL',   GROUP_MA=('TOUT',)), 
                 MAILLAGE=MA)

# DEFINICION DEL MODELIZACION. POU_D_T es un modelo de viga (1D) con hipotesis de
# Timoshenko. La misma tiene 6 grados de libertad por nodo. (3 desplazamientos y 3 rot.)

MO = AFFE_MODELE(AFFE=_F(MODELISATION='POU_D_T',
                         PHENOMENE='MECANIQUE',
                         TOUT='OUI'),
                 MAILLAGE=MA)

# DEFINICION DE PROPIEDAD DE LA SECCION TRANSVERSAL
CARELEM = AFFE_CARA_ELEM(MODELE=MO,
                         POUTRE=_F(CARA=('HY', 'HZ'),
                                   GROUP_MA='TOUT',
                                   SECTION='RECTANGLE',
                                   VALE=(0.05, 0.05)))

# DEFINICION DE LAS PROPIEDADES DEL MATERIAL Y AFECTACION A TODO EL MODELO (UNICO MAT.)
MAT = DEFI_MATERIAU(ELAS=_F(E=210000000000.0,
                            NU=0.3,
                            RHO=7800.0))

CHMAT = AFFE_MATERIAU(AFFE=_F(MATER=MAT,
                              TOUT='OUI'),
                      MAILLAGE=MA)

# CONDICION DE BORDE. Empotramiento en el Nodo A.
CH1 = AFFE_CHAR_MECA(DDL_IMPO=(#_F(DRX=0.0,
                               #  DRY=0.0,
                               #  DRZ=0.0,
                               #  GROUP_NO='N_A'),
                              _F(DX=0.0,
                                 DY=0.0,
                                 DZ=0.0,
                                 DRX=0.0,
                                 DRY=0.0,
                                 DRZ=0.0,
                                 GROUP_NO='N_A')),
                     DOUBLE_LAGRANGE='OUI',
                     MODELE=MO)

# --------------------------------------------------------------------

TABL_MAS = POST_ELEM(CARA_ELEM=CARELEM,
                     CHAM_MATER=CHMAT,
                     MASS_INER=_F(TOUT='OUI'),
                     MODELE=MO)

IMPR_TABLE(TABLE=TABL_MAS,
           UNITE=8)

# ==========================================================================

print("FLAG /=========")

MELR1 = CALC_MATR_ELEM(CARA_ELEM=CARELEM,
                       CHAM_MATER=CHMAT,
                       CHARGE=CH1,
                       MODELE=MO,
                       OPTION='RIGI_MECA')

MELM1 = CALC_MATR_ELEM(CARA_ELEM=CARELEM,
                       CHAM_MATER=CHMAT,
                       CHARGE=CH1,
                       MODELE=MO,
                       OPTION='MASS_MECA_DIAG') # matriz de masa diagonalizada (M == SPD, util para alg QR). 
                       #OPTION='MASS_MECA')

NUM1 = NUME_DDL(MATR_RIGI=MELR1)

MATASSR1 = ASSE_MATRICE(INFO=2,
                        MATR_ELEM=MELR1,
                        NUME_DDL=NUM1)

MATASSM1 = ASSE_MATRICE(INFO=2,
                        MATR_ELEM=MELM1,
                        NUME_DDL=NUM1)

dire = "/home/santi/Dropbox/GRUPO-IFIR-FMMH/CURSO-FEM/ALN/TEST_QR_Files"
KEXTR = MATASSR1.EXTR_MATR()

# Convertir los datos a un DataFrame
df_result = pd.DataFrame(KEXTR)

df_result.to_csv(f"{dire}/Matrix_K.csv")

print("FLAG /=========")

MEXTR = MATASSM1.EXTR_MATR()

# Convertir los datos a un DataFrame
df_result = pd.DataFrame(MEXTR)

df_result.to_csv(f"{dire}/Matrix_M.csv")

# ==========================================================================

FREQ_QZ0 = CALC_MODES(CALC_FREQ=_F(NMAX_FREQ=11), 
                     INFO=2,
                     MATR_MASS=MATASSM1,
                     MATR_RIGI=MATASSR1,
                     OPTION='PLUS_PETITE',
                     SOLVEUR_MODAL=_F(METHODE='QZ', TYPE_QZ='QZ_SIMPLE'))

FREQ_QZ1 = CALC_MODES(CALC_FREQ=_F(NMAX_FREQ=11), 
                     INFO=2,
                     MATR_MASS=MATASSM1,
                     MATR_RIGI=MATASSR1,
                     OPTION='PLUS_PETITE',
                     SOLVEUR_MODAL=_F(METHODE='QZ', TYPE_QZ='QZ_EQUI'))

FREQ_SOR = CALC_MODES(CALC_FREQ=_F(FREQ=(0.0, 6000.0)),
                      MATR_MASS=MATASSM1,
                      MATR_RIGI=MATASSR1,
                      OPTION='BANDE',
                      SOLVEUR_MODAL=_F(METHODE='SORENSEN'),
                      TITRE='METHODE DE SORENSEN')

FREQ_LAN = CALC_MODES(CALC_FREQ=_F(FREQ=(0.0, 6000.0)),
                      MATR_MASS=MATASSM1,
                      MATR_RIGI=MATASSR1,
                      OPTION='BANDE',
                      SOLVEUR_MODAL=_F(METHODE='TRI_DIAG'),
                      TITRE='METHODE DE LANCZOS')

FREQ_JAC = CALC_MODES(CALC_FREQ=_F(FREQ=(0.0, 6000.0)),
                      MATR_MASS=MATASSM1,
                      MATR_RIGI=MATASSR1,
                      OPTION='BANDE',
                      SOLVEUR_MODAL=_F(METHODE='JACOBI'),
                      TITRE='METHODE DE BATHE',
                      VERI_MODE=_F(PREC_SHIFT=0.005,
                                   SEUIL=3e-05,
                                   STOP_ERREUR='NON',
                                   STURM='GLOBAL'))


# ==========================================================================

FREQ_SOR = NORM_MODE(reuse=FREQ_SOR,
                     MODE=FREQ_SOR,
                     NORME='EUCL')


FREQ_LAN = NORM_MODE(reuse=FREQ_LAN,
                     MODE=FREQ_LAN,
                     NORME='EUCL')



FREQ_JAC = NORM_MODE(reuse=FREQ_JAC,
                     MODE=FREQ_JAC,
                     NORME='EUCL')


# FREQ_QZ = NORM_MODE(reuse=FREQ_QZ,
#                     MODE=FREQ_QZ,
#                     NORME='EUCL')


def generate_frequency_table(methods):
    """
    Genera una tabla de frecuencias con nombres de columnas personalizados para distintos métodos.
    
    :param methods: Diccionario con nombres de métodos como claves y objetos NORM_MODE como valores.
    :return: DataFrame con las frecuencias ordenadas y renombradas.
    """
    df_list = []
    
    for method_name, method_obj in methods.items():
        df = pd.DataFrame(method_obj.LIST_PARA())
        if "NUME_ORDRE" in df and "FREQ" in df:
            df = df[["NUME_ORDRE", "FREQ"]]
            df.rename(columns={"FREQ": f"FREQ_{method_name.upper()}"}, inplace=True)
            df_list.append(df)
    
    # Unir los DataFrames por "NUME_ORDRE"
    df_final = df_list[0]
    for df in df_list[1:]:
        df_final = df_final.merge(df, on="NUME_ORDRE", how="outer")
    
    return df_final

# Definir los métodos
methods = {
    "SOR": FREQ_SOR,
    "LAN": FREQ_LAN,
    #"JAC": FREQ_JAC,
    "QZ_SIMPLE": FREQ_QZ0,
    "QZ_EQUI": FREQ_QZ1,
}

# Generar la tabla
df_result = generate_frequency_table(methods)
# print(df_result)
df_result.to_csv(f"{dire}/frecuencias.csv")


IMPR_RESU(FORMAT='RESULTAT',
          RESU=_F(RESULTAT=FREQ_QZ0,
                  TOUT_CHAM='NON',
                  TOUT_PARA='OUI'),
          UNITE=8)

IMPR_RESU(FORMAT='RESULTAT',
          RESU=_F(RESULTAT=FREQ_JAC,
                  TOUT_CHAM='NON',
                  TOUT_PARA='OUI'),
          UNITE=8)

IMPR_RESU(FORMAT='MED',
          RESU=(_F(MAILLAGE=MA),
                _F(RESULTAT=FREQ_SOR),
                _F(RESULTAT=FREQ_LAN),
                _F(RESULTAT=FREQ_JAC)),
          UNITE=55)

# IMPR_RESU(FORMAT='RESULTAT',
#           RESU=(_F(IMPR_COOR='OUI',
#                    NOM_CHAM='DEPL',
#                    NOM_CMP=('DY', 'DZ'),
#                    NUME_ORDRE=(1, 2),
#                    RESULTAT=FREQ_SOR),
#                 _F(IMPR_COOR='OUI',
#                    NOM_CHAM='DEPL',
#                    NOM_CMP=('DY', 'DZ'),
#                    NUME_ORDRE=(1, 2),
#                    RESULTAT=FREQ_LAN),
#                 _F(IMPR_COOR='OUI',
#                    NOM_CHAM='DEPL',
#                    NOM_CMP=('DY', 'DZ'),
#                    NUME_ORDRE=(1, 2),
#                    RESULTAT=FREQ_JAC),
#                 _F(IMPR_COOR='OUI',
#                    NOM_CHAM='DEPL',
#                    NOM_CMP=('DY', 'DZ'),
#                    NUME_ORDRE=(1, 2),
#                    RESULTAT=FREQ_INV)),
#           UNITE=8)

FIN()
